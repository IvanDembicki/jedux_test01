

// ===== Add this lines to 'jedux_data/jedux_const.dart' =====


static const APP_HOLDER = "App";
static const LOGIN_ERROR_HOLDER = "LoginError";
static const LOGIN_LOADING_HOLDER = "LoginLoading";
static const LOGIN_READY_HOLDER = "LoginReady";
static const LOGIN_WAITING_HOLDER = "LoginWaiting";
static const SESSION = "session";
static const TITLE = "title";
static const URL = "url";
static const USER_EXPIRED_HOLDER = "UserExpired";
static const USER_NEWBIE_HOLDER = "UserNewbie";
static const USER_PAGE_HOLDER = "UserPage";
static const USER_PAID_HOLDER = "UserPaid";



// ===== Add this classes to 'jedux_holders' folder =====



// app_holder.dart
import '../jedux_data/jedux_const.dart';
import '../jedux/jedux.dart';

class AppHolder extends JeduxHolder {
  static AppHolder build(Map data, JeduxHolder parent) {
    return AppHolder(data, parent);
  }

  AppHolder(Map data, JeduxHolder parent) : super(data, parent);
      String get url => getProperty(JeduxConst.URL);
    set url(String value) => setProperty(JeduxConst.URL, value);

    String get title => getProperty(JeduxConst.TITLE);
    set title(String value) => setProperty(JeduxConst.TITLE, value);

    String get session => getProperty(JeduxConst.SESSION);
    set session(String value) => setProperty(JeduxConst.SESSION, value);

}


// login_waiting_holder.dart
import '../jedux_data/jedux_const.dart';
import '../jedux/jedux.dart';

class LoginWaitingHolder extends JeduxHolder {
  static LoginWaitingHolder build(Map data, JeduxHolder parent) {
    return LoginWaitingHolder(data, parent);
  }

  LoginWaitingHolder(Map data, JeduxHolder parent) : super(data, parent);
      String get title => getProperty(JeduxConst.TITLE);
    set title(String value) => setProperty(JeduxConst.TITLE, value);

}


// login_loading_holder.dart
import '../jedux_data/jedux_const.dart';
import '../jedux/jedux.dart';

class LoginLoadingHolder extends JeduxHolder {
  static LoginLoadingHolder build(Map data, JeduxHolder parent) {
    return LoginLoadingHolder(data, parent);
  }

  LoginLoadingHolder(Map data, JeduxHolder parent) : super(data, parent);
      String get title => getProperty(JeduxConst.TITLE);
    set title(String value) => setProperty(JeduxConst.TITLE, value);

}


// login_error_holder.dart
import '../jedux_data/jedux_const.dart';
import '../jedux/jedux.dart';

class LoginErrorHolder extends JeduxHolder {
  static LoginErrorHolder build(Map data, JeduxHolder parent) {
    return LoginErrorHolder(data, parent);
  }

  LoginErrorHolder(Map data, JeduxHolder parent) : super(data, parent);
      String get title => getProperty(JeduxConst.TITLE);
    set title(String value) => setProperty(JeduxConst.TITLE, value);

}


// login_ready_holder.dart
import '../jedux_data/jedux_const.dart';
import '../jedux/jedux.dart';

class LoginReadyHolder extends JeduxHolder {
  static LoginReadyHolder build(Map data, JeduxHolder parent) {
    return LoginReadyHolder(data, parent);
  }

  LoginReadyHolder(Map data, JeduxHolder parent) : super(data, parent);
      String get title => getProperty(JeduxConst.TITLE);
    set title(String value) => setProperty(JeduxConst.TITLE, value);

}


// user_newbie_holder.dart
import '../jedux_data/jedux_const.dart';
import '../jedux/jedux.dart';

class UserNewbieHolder extends JeduxHolder {
  static UserNewbieHolder build(Map data, JeduxHolder parent) {
    return UserNewbieHolder(data, parent);
  }

  UserNewbieHolder(Map data, JeduxHolder parent) : super(data, parent);
      String get title => getProperty(JeduxConst.TITLE);
    set title(String value) => setProperty(JeduxConst.TITLE, value);

}


// user_expired_holder.dart
import '../jedux_data/jedux_const.dart';
import '../jedux/jedux.dart';

class UserExpiredHolder extends JeduxHolder {
  static UserExpiredHolder build(Map data, JeduxHolder parent) {
    return UserExpiredHolder(data, parent);
  }

  UserExpiredHolder(Map data, JeduxHolder parent) : super(data, parent);
      String get title => getProperty(JeduxConst.TITLE);
    set title(String value) => setProperty(JeduxConst.TITLE, value);

}


// user_paid_holder.dart
import '../jedux_data/jedux_const.dart';
import '../jedux/jedux.dart';

class UserPaidHolder extends JeduxHolder {
  static UserPaidHolder build(Map data, JeduxHolder parent) {
    return UserPaidHolder(data, parent);
  }

  UserPaidHolder(Map data, JeduxHolder parent) : super(data, parent);
      String get title => getProperty(JeduxConst.TITLE);
    set title(String value) => setProperty(JeduxConst.TITLE, value);

}


// user_page_holder.dart
import '../jedux_data/jedux_const.dart';
import '../jedux/jedux.dart';

class UserPageHolder extends JeduxHolder {
  static UserPageHolder build(Map data, JeduxHolder parent) {
    return UserPageHolder(data, parent);
  }

  UserPageHolder(Map data, JeduxHolder parent) : super(data, parent);
      String get url => getProperty(JeduxConst.URL);
    set url(String value) => setProperty(JeduxConst.URL, value);

}


// ===== Add this lines to 'jedux_data/jedux_builders.dart map =====
      class JeduxBuilders {
          static final Map<String, JeduxHolder Function(Map, JeduxHolder)> map = {
          // yes, here
          };
      }


JeduxConst.APP_HOLDER: AppHolder.build,

JeduxConst.LOGIN_WAITING_HOLDER: LoginWaitingHolder.build,

JeduxConst.LOGIN_LOADING_HOLDER: LoginLoadingHolder.build,

JeduxConst.LOGIN_ERROR_HOLDER: LoginErrorHolder.build,

JeduxConst.LOGIN_READY_HOLDER: LoginReadyHolder.build,

JeduxConst.USER_NEWBIE_HOLDER: UserNewbieHolder.build,

JeduxConst.USER_EXPIRED_HOLDER: UserExpiredHolder.build,

JeduxConst.USER_PAID_HOLDER: UserPaidHolder.build,

JeduxConst.USER_PAGE_HOLDER: UserPageHolder.build,



// ===== Add this classes to 'views' folder =====


// app_view.dart
import 'package:flutter/material.dart';
import '../jedux/jedux.dart';
import '../jedux_holders/app_holder.dart';

import '../jedux_holders/login_waiting_holder.dart';
import '../jedux_holders/login_loading_holder.dart';
import '../jedux_holders/login_error_holder.dart';
import '../jedux_holders/login_ready_holder.dart';
import 'login_waiting_view.dart';
import 'login_loading_view.dart';
import 'login_error_view.dart';
import 'login_ready_view.dart';

class AppView extends JeduxListener {
  AppHolder get _holder => jeduxHolder as AppHolder;

  AppView(JeduxHolder stateHolder, {Key key}) : super(stateHolder, key: key);

  @override
  Widget build(BuildContext context) {
    return _getOpenedChildView(_holder.openedChild);
  }

  JeduxListener _getOpenedChildView(JeduxHolder openedHolder) {
    switch (openedHolder.runtimeType) {
    case LoginWaitingHolder:
      return LoginWaitingView(openedHolder);
case LoginLoadingHolder:
      return LoginLoadingView(openedHolder);
case LoginErrorHolder:
      return LoginErrorView(openedHolder);
case LoginReadyHolder:
      return LoginReadyView(openedHolder);
    }
    print("***ERROR*** [AppView]._getOpenedChildView([${openedHolder.runtimeType}])");
    return null;
  }

}


// views/login_waiting_view.dart

import 'package:flutter/material.dart';
import '../jedux/jedux.dart';
import '../jedux_holders/login_waiting_holder.dart';

class LoginWaitingView extends JeduxListener {
  LoginWaitingHolder get _holder => jeduxHolder as LoginWaitingHolder;

  LoginWaitingView(JeduxHolder stateHolder, {Key key}) : super(stateHolder, key: key);

  @override
  Widget build(BuildContext context) {
    return Text("");
  }
}

// views/login_loading_view.dart

import 'package:flutter/material.dart';
import '../jedux/jedux.dart';
import '../jedux_holders/login_loading_holder.dart';

class LoginLoadingView extends JeduxListener {
  LoginLoadingHolder get _holder => jeduxHolder as LoginLoadingHolder;

  LoginLoadingView(JeduxHolder stateHolder, {Key key}) : super(stateHolder, key: key);

  @override
  Widget build(BuildContext context) {
    return Text("");
  }
}

// views/login_error_view.dart

import 'package:flutter/material.dart';
import '../jedux/jedux.dart';
import '../jedux_holders/login_error_holder.dart';

class LoginErrorView extends JeduxListener {
  LoginErrorHolder get _holder => jeduxHolder as LoginErrorHolder;

  LoginErrorView(JeduxHolder stateHolder, {Key key}) : super(stateHolder, key: key);

  @override
  Widget build(BuildContext context) {
    return Text("");
  }
}

// login_ready_view.dart
import 'package:flutter/material.dart';
import '../jedux/jedux.dart';
import '../jedux_holders/login_ready_holder.dart';

import '../jedux_holders/user_newbie_holder.dart';
import '../jedux_holders/user_expired_holder.dart';
import '../jedux_holders/user_paid_holder.dart';
import 'user_newbie_view.dart';
import 'user_expired_view.dart';
import 'user_paid_view.dart';

class LoginReadyView extends JeduxListener {
  LoginReadyHolder get _holder => jeduxHolder as LoginReadyHolder;

  LoginReadyView(JeduxHolder stateHolder, {Key key}) : super(stateHolder, key: key);

  @override
  Widget build(BuildContext context) {
    return _getOpenedChildView(_holder.openedChild);
  }

  JeduxListener _getOpenedChildView(JeduxHolder openedHolder) {
    switch (openedHolder.runtimeType) {
    case UserNewbieHolder:
      return UserNewbieView(openedHolder);
case UserExpiredHolder:
      return UserExpiredView(openedHolder);
case UserPaidHolder:
      return UserPaidView(openedHolder);
    }
    print("***ERROR*** [LoginReadyView]._getOpenedChildView([${openedHolder.runtimeType}])");
    return null;
  }

}


// views/user_newbie_view.dart

import 'package:flutter/material.dart';
import '../jedux/jedux.dart';
import '../jedux_holders/user_newbie_holder.dart';

class UserNewbieView extends JeduxListener {
  UserNewbieHolder get _holder => jeduxHolder as UserNewbieHolder;

  UserNewbieView(JeduxHolder stateHolder, {Key key}) : super(stateHolder, key: key);

  @override
  Widget build(BuildContext context) {
    return Text("");
  }
}

// views/user_expired_view.dart

import 'package:flutter/material.dart';
import '../jedux/jedux.dart';
import '../jedux_holders/user_expired_holder.dart';

class UserExpiredView extends JeduxListener {
  UserExpiredHolder get _holder => jeduxHolder as UserExpiredHolder;

  UserExpiredView(JeduxHolder stateHolder, {Key key}) : super(stateHolder, key: key);

  @override
  Widget build(BuildContext context) {
    return Text("");
  }
}

// user_paid_view.dart
import 'package:flutter/material.dart';
import '../jedux/jedux.dart';
import '../jedux_holders/user_paid_holder.dart';

import '../jedux_holders/user_page_holder.dart';
import 'user_page_view.dart';

class UserPaidView extends JeduxListener {
  UserPaidHolder get _holder => jeduxHolder as UserPaidHolder;

  UserPaidView(JeduxHolder stateHolder, {Key key}) : super(stateHolder, key: key);

  @override
  Widget build(BuildContext context) {
    return _getOpenedChildView(_holder.openedChild);
  }

  JeduxListener _getOpenedChildView(JeduxHolder openedHolder) {
    switch (openedHolder.runtimeType) {
    case UserPageHolder:
      return UserPageView(openedHolder);
    }
    print("***ERROR*** [UserPaidView]._getOpenedChildView([${openedHolder.runtimeType}])");
    return null;
  }

}


// views/user_page_view.dart

import 'package:flutter/material.dart';
import '../jedux/jedux.dart';
import '../jedux_holders/user_page_holder.dart';

class UserPageView extends JeduxListener {
  UserPageHolder get _holder => jeduxHolder as UserPageHolder;

  UserPageView(JeduxHolder stateHolder, {Key key}) : super(stateHolder, key: key);

  @override
  Widget build(BuildContext context) {
    return Text("");
  }
}
